// <auto-generated />
using System;
using LearningManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningManagementSystem.Migrations
{
    [DbContext(typeof(LMSContext))]
    partial class LMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssignmentSubmission", b =>
                {
                    b.Property<string>("SubmissionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("SelectedOptionLabel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SelectedOptionText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubmissionId")
                        .HasName("PK_AssignmentSubmissions");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserName");

                    b.HasIndex("AssignmentId", "QuestionId", "UserName")
                        .IsUnique()
                        .HasDatabaseName("UQ_AssignmentSubmissions_AssignmentId_QuestionId_UserName");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("LessonId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AssignmentId")
                        .HasName("PK_Assignments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Assignments_CourseId");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("IX_Assignments_LessonId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestion", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MaxScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1m);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionId")
                        .HasName("PK_AssignmentQuestions");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("IX_AssignmentQuestions_AssignmentId");

                    b.ToTable("AssignmentQuestions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestionOption", b =>
                {
                    b.Property<string>("OptionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionLabel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssignmentQuestionOptions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CartId")
                        .HasName("PK_Carts");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UQ_Carts_UserName");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CartItem", b =>
                {
                    b.Property<string>("CartItemId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CartItemId")
                        .HasName("PK_CartItems");

                    b.HasIndex("CourseId");

                    b.HasIndex("CartId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("UQ_CartItems_CartId_CourseId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CommentId")
                        .HasName("PK_Comments");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserName", "CourseId")
                        .HasDatabaseName("IX_Comments_UserName_CourseId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CourseId")
                        .HasName("PK_Courses");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CourseInstructor", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseId", "UserName")
                        .HasName("PK_CourseInstructors");

                    b.HasIndex("UserName");

                    b.ToTable("CourseInstructors");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EnrollmentId")
                        .HasName("PK_Enrollments");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserName", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Enrollments_UserName_CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Lesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LessonId")
                        .HasName("PK_Lessons");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Lessons_CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notifications");

                    b.HasIndex("UserName")
                        .HasDatabaseName("IX_Notifications_UserName");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK_OrderDetails");

                    b.HasIndex("CourseId");

                    b.HasIndex("PaymentId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("UQ_OrderDetails_PaymentId_CourseId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId")
                        .HasName("PK_Payments");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserName", "CourseId")
                        .HasDatabaseName("IX_Payments_UserName_CourseId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Progress", b =>
                {
                    b.Property<string>("ProgressId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CompletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProgressId")
                        .HasName("PK_Progresses");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserName", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Progresses_UserName_LessonId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK_Roles");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserName")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_Users_Email");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AssignmentSubmission", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.AssignmentQuestion", "Question")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestion", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Assignment", "Assignment")
                        .WithMany("Questions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestionOption", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.AssignmentQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Cart", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CartItem", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("CartItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Comment", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.CourseInstructor", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Enrollment", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Lesson", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Notification", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.OrderDetail", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.Payment", "Payment")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Payment", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Progress", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Models.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.User", b =>
                {
                    b.HasOne("LearningManagementSystem.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Assignment", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.AssignmentQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CartItems");

                    b.Navigation("Comments");

                    b.Navigation("CourseInstructors");

                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Lesson", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Payment", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LearningManagementSystem.Models.User", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("CourseInstructors");

                    b.Navigation("Enrollments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
